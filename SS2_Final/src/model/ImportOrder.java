package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;

public class ImportOrder {

	@DAttr(name = "id", id = true, auto = true, type = Type.String, length = 6, mutable = false, optional = false)
	private String id;


	@DAttr(name = "supplier", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "importOrder-has-supplier", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "importOrder", associate = @Associate(cardMax = 25, cardMin = 1, type = Supplier.class))
	private Supplier supplier;
	
	@DAttr(name = "importer", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "importOrder-has-importer", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "importOrder", associate = @Associate(cardMax = 25, cardMin = 1, type = Importer.class))
	private Importer importer;


	@DAttr(name = "date", type = Type.String, length = 30, optional = false)
	private String date;
	private static int idCounter = 0;
	
	
	@DOpt(type=DOpt.Type.DataSourceConstructor)
	public ImportOrder(String id, Supplier supplier ,Importer importer,String date 
			) {
		this.id = nextID(id);
		this.supplier = supplier;
		this.importer = importer;
		this.date = date;

	}
	
	@DOpt(type=DOpt.Type.ObjectFormConstructor)
	 @DOpt(type=DOpt.Type.RequiredConstructor)
	public ImportOrder(@AttrRef("supplier") Supplier supplier, @AttrRef("importer") Importer importer,
			@AttrRef("date") String date ) {
		this(null, supplier, importer, date );
	}

	public String getId() {
		return id;
	}

	public Supplier getSupplier() {
		return supplier;
	}

	public void setSupplier(Supplier supplier) {
		this.supplier = supplier;
	}

	public Importer getImporter() {
		return importer;
	}

	public void setImporter(Importer importer) {
		this.importer = importer;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	@Override
	public String toString() {
		return "Order(" + id + "," + supplier + "," + importer + "," + date + ")";
	}

	public String nextID(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;

			return "IO" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(2));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(2));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}

}
